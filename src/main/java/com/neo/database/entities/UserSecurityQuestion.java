package com.neo.database.entities;
// Generated May 9, 2015 3:13:15 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

/**
 * UserSecurityQuestion generated by hbm2java
 */
@Entity
@Table(name = "user_security_question", catalog = "project_ecommerce"
)
public class UserSecurityQuestion implements java.io.Serializable {

    private Integer userSecurityQuestionId;
    private SecurityQuestion securityQuestion;
    private String answer;
    private Set<User> users = new HashSet<User>(0);

    public UserSecurityQuestion() {
    }

    public UserSecurityQuestion(SecurityQuestion securityQuestion) {
        this.securityQuestion = securityQuestion;
    }

    public UserSecurityQuestion(SecurityQuestion securityQuestion, String answer, Set<User> users) {
        this.securityQuestion = securityQuestion;
        this.answer = answer;
        this.users = users;
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)

    @Column(name = "user_security_question_id", unique = true, nullable = false)
    public Integer getUserSecurityQuestionId() {
        return this.userSecurityQuestionId;
    }

    public void setUserSecurityQuestionId(Integer userSecurityQuestionId) {
        this.userSecurityQuestionId = userSecurityQuestionId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "security_question_id", nullable = false)
    public SecurityQuestion getSecurityQuestion() {
        return this.securityQuestion;
    }

    public void setSecurityQuestion(SecurityQuestion securityQuestion) {
        this.securityQuestion = securityQuestion;
    }

    @Column(name = "answer", length = 100)
    public String getAnswer() {
        return this.answer;
    }

    public void setAnswer(String answer) {
        this.answer = answer;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "userSecurityQuestion")
    public Set<User> getUsers() {
        return this.users;
    }

    public void setUsers(Set<User> users) {
        this.users = users;
    }

}
